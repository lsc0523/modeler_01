export default function SequenceFlowBehavior(
    simulator,
    scopeBehavior) {

  this._simulator = simulator;
  this._scopeBehavior = scopeBehavior;

  simulator.registerBehavior('bpmn:SequenceFlow', this);
}

let systeminterface = (str,delay) => {
  return new Promise((resolve) =>
    setTimeout(() => {
      console.log(str);
      resolve();
    },delay));
};

SequenceFlowBehavior.prototype.enter =  async function(context) {
  this._simulator.exit(context);

  $('[title="Play/Pause Simulation"]').click();
  await systeminterface("시스템통신구현부분",3000);
  $('[title="Play/Pause Simulation"]').click();
};

SequenceFlowBehavior.prototype.exit = function(context) {
  const {
    element,
    scope
  } = context;

  this._simulator.enter({
    element: element.target,
    scope: scope.parent
  });
};

SequenceFlowBehavior.$inject = [
  'simulator',
  'scopeBehavior'
];